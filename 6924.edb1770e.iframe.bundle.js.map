{"version":3,"file":"6924.edb1770e.iframe.bundle.js","mappings":";;;;;;;;AA6BA","sources":["webpack://@ticketswap/solar/./src/components/Image/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react'\nimport styled from '@emotion/styled'\nimport { keyframes } from '@emotion/react'\nimport { color, transition, duration, radius } from '../../theme'\nimport { fetchImage } from './fetchImage'\n\nexport interface ImageProps {\n  src: string\n  lazyload?: boolean\n  width?: number\n  height?: number\n  rounded?: boolean\n  alt: string\n}\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`\n\ninterface StyledContainerProps {\n  rounded: boolean\n}\n\nconst Container = styled.div<StyledContainerProps>`\n  position: relative;\n  line-height: 0;\n  overflow: hidden;\n  border-radius: ${props => (props.rounded ? radius.lg : 0)};\n  animation-duration: ${duration}ms;\n  animation-fill-mode: both;\n  animation-name: ${fadeIn};\n  backface-visibility: hidden;\n`\n\ninterface StyledImageProps {\n  show: boolean\n}\n\nconst Placeholder = styled.img<StyledImageProps>`\n  vertical-align: middle;\n  transition: opacity ${transition};\n  background-color: ${color.elevatedBackground};\n  opacity: ${props => (props.show ? 0 : 1)};\n  inline-size: 100%;\n  block-size: 100%;\n`\n\nconst StyledImage = styled.img<StyledImageProps>`\n  inline-size: 100%;\n  block-size: 100%;\n  vertical-align: middle;\n  transition: opacity ${transition};\n  opacity: ${props => (props.show ? 1 : 0)};\n  position: absolute;\n  inset-inline-start: 0;\n  inset-block-start: 0;\n  object-fit: cover;\n`\n\nfunction placeholderSrc(width: number, height: number) {\n  return `data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\"%3E%3C/svg%3E`\n}\n\nexport const Image: React.FC<ImageProps> = ({\n  src,\n  lazyload = true,\n  width = 1200,\n  height = 800,\n  rounded = false,\n  alt,\n  ...props\n}) => {\n  const [loaded, setLoaded] = useState(false)\n  const [imageSrc, setImageSrc] = useState(placeholderSrc(width, height))\n  const imageRef = useRef<HTMLImageElement>(null)\n  const observer = useRef<IntersectionObserver | null>(null)\n\n  const handleLoad = useCallback(async () => {\n    try {\n      await fetchImage(src)\n\n      setLoaded(true)\n      setImageSrc(src)\n    } catch (error) {\n      setLoaded(true)\n      setImageSrc(placeholderSrc(width, height))\n    }\n  }, [height, src, width])\n\n  const handleLazyLoad = useCallback(\n    (entries: IntersectionObserverEntry[]) => {\n      if (entries && entries.length && entries[0].intersectionRatio > 0) {\n        if (imageRef.current !== null && observer.current !== null) {\n          handleLoad()\n          observer.current.unobserve(imageRef.current)\n        }\n      }\n    },\n    [handleLoad]\n  )\n\n  const initObserver = useCallback(() => {\n    if (!lazyload) return false\n\n    const config = {\n      root: null, // Specifying `null` watches the documentâ€™s viewport\n      rootMargin: '-10px',\n      threshold: 0.01,\n    }\n\n    if (\n      'IntersectionObserver' in window &&\n      'IntersectionObserverEntry' in window &&\n      'intersectionRatio' in window.IntersectionObserverEntry.prototype &&\n      imageRef.current !== null\n    ) {\n      observer.current = new IntersectionObserver(handleLazyLoad, config)\n      observer.current.observe(imageRef.current)\n    } else {\n      handleLoad()\n    }\n    return\n  }, [handleLazyLoad, handleLoad, lazyload])\n\n  useEffect(() => {\n    initObserver()\n\n    return () => {\n      if (observer.current !== null) {\n        observer.current.disconnect()\n      }\n    }\n  }, [initObserver, observer])\n\n  useEffect(() => {\n    setLoaded(false)\n    setImageSrc(placeholderSrc(width, height))\n\n    initObserver()\n  }, [height, initObserver, src, width])\n\n  useEffect(() => {\n    if (!Boolean(observer.current)) {\n      initObserver()\n    }\n  }, [initObserver, lazyload, observer])\n\n  return (\n    <Container rounded={rounded} {...props} role=\"img\" aria-label={alt}>\n      <Placeholder\n        src={placeholderSrc(width, height)}\n        aria-hidden=\"true\"\n        alt=\"Placeholder image\"\n        show={loaded}\n      />\n      <StyledImage src={imageSrc} ref={imageRef} show={loaded} alt={alt} />\n    </Container>\n  )\n}\n"],"names":[],"sourceRoot":""}